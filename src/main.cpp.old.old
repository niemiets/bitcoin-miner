#include <cstdint>
#include <iostream>
#include <span>
#include <spanstream>

#include <winsock2.h>
#include <ws2tcpip.h>
#include <bitset>

#include "algorithms/crypto.h"

void hexdump(void *ptr, int buflen) {
  unsigned char *buf = (unsigned char*)ptr;
  int i, j;
  for (i=0; i<buflen; i+=16) {
    printf("%06x: ", i);
    for (j=0; j<16; j++)
      if (i+j < buflen)
        printf("%02x ", buf[i+j]);
      else
        printf("   ");
    printf(" ");
    for (j=0; j<16; j++)
      if (i+j < buflen)
        printf("%c", isprint(buf[i+j]) ? buf[i+j] : '.');
    printf("\n");
  }
}

int main()
{
	std::string HOSTNAME = "16.16.139.80";
	const char *PORT = "8333";

	int err_code = ERROR_SUCCESS;

	WSADATA init_data;

	err_code = WSAStartup(MAKEWORD(2, 2), &init_data);

	if (err_code != ERROR_SUCCESS)
	{
		std::cerr << "Couldn't initiate winsock dll: " << err_code << '\n';
		return 1;
	}

	addrinfo hints {};
	hints.ai_addrlen = 0;
	hints.ai_canonname = nullptr;
	hints.ai_addr = nullptr;
	hints.ai_next = nullptr;
	hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

	addrinfo *res = new addrinfo;

	err_code = getaddrinfo(HOSTNAME.c_str(), PORT, &hints, &res);

	if (err_code != ERROR_SUCCESS)
	{
		std::cerr << "Couldn't get address info: " << err_code << '\n';
		return 1;
	}

	SOCKET sock = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

	if (sock == INVALID_SOCKET)
	{
		std::cerr << "Couldn't create socket: " << WSAGetLastError() << '\n';
		return 1;
	}

	if (connect(sock, res->ai_addr, static_cast<int>(res->ai_addrlen)) == SOCKET_ERROR)
	{
		std::cerr << "Couldn't connect to socket: " << WSAGetLastError() << '\n';
		return 1;
	}

	char payload_buffer[4096] = {0};

	const std::span<char> payload_span(std::begin(payload_buffer) + 24, 4096 - 24);

	std::spanstream payload_stream(payload_span, std::ios::binary | std::ios::in | std::ios::out);

	// TODO: fix ts sht
	const int32_t d_ver = 70016;
	const uint64_t d_serv = 0; // TODO: change this to some other than 0x00
	const int64_t d_time = std::time(nullptr);
	const uint64_t d_addr_recv_serv = 0;
	char d_addr_recv_ip[16];
	const uint16_t d_addr_recv_port = std::byteswap(static_cast<uint16_t>(8333));
	const uint64_t d_addr_trans_serv = d_serv;
	char d_addr_trans_ip[16];
	const uint16_t d_addr_trans_port = std::byteswap(static_cast<uint16_t>(8333));
	const uint64_t d_nonce = 0; // TODO: add nonce support
	const uint8_t d_compactSize = 0x00; // TODO: add compact size
	const char *d_user_agent = ""; // TODO: probably do
	const int32_t d_start_height = 0x00; // TODO: fill
	const bool d_relay = true; // TODO: idk its optional
	
	inet_pton(AF_INET6, ("::ffff:" + HOSTNAME).c_str(), d_addr_recv_ip);
	inet_pton(AF_INET6, "::ffff:127.0.0.1", d_addr_trans_ip);
	
	payload_stream
	.write((char *)&d_ver, 4)
	.write((char *)&d_serv, 8)
	.write((char *)&d_time, 8)
	.write((char *)&d_addr_recv_serv, 8)
	.write((char *)&d_addr_recv_ip, 16)
	.write((char *)&d_addr_recv_port, 2)
	.write((char *)&d_addr_trans_serv, 8)
	.write((char *)&d_addr_trans_ip, 16)
	.write((char *)&d_addr_trans_port, 2)
	.write((char *)&d_nonce, 8)
	.write((char *)&d_compactSize, sizeof(d_compactSize))
	.write((char *)&d_user_agent, strlen(d_user_agent))
	.write((char *)&d_start_height, 4)
	.write((char *)&d_relay, 1);

	// std::cout.write(payload_stream.span().data(), static_cast<long long>(payload_stream.span().size()));
	//
	// std::cout << '\n';
	//
	// std::cout << payload_stream.span().size() << '\n';

	const std::span<char> header_span(std::begin(payload_buffer), 24);

	std::spanstream header_stream(header_span, std::ios::binary | std::ios::in | std::ios::out);

	const char *d_start_string = reinterpret_cast<char*>(std::byteswap(0xf9beb4d9));
	const char d_cmd_name[12] = "version\0\0\0\0";
	const uint32_t d_payload_size = payload_stream.span().size();
	uint8_t* hash = reinterpret_cast<uint8_t*>(sha256(reinterpret_cast<const uint8_t*>(payload_stream.span().data()), payload_stream.span().size() * (sizeof(char) * 8)));
	const char *d_checksum = reinterpret_cast<char *>(sha256(hash, 256));

	std::cout << "hash: \n";
	for (uint8_t i = 0; i < payload_stream.span().size() * sizeof(char); i++)
	{
		if (i % 4 == 0)
		{
			std::cout << '\n';
		}

		std::cout << std::hex << (hash[i] & 0xFF) << ' ';
	}

	std::cout << "sum: \n";
	for (uint8_t i = 0; i < 32; i++)
	{
		if (i % 4 == 0)
		{
			std::cout << '\n';
		}

		std::cout << std::hex << (d_checksum[i] & 0xFF) << ' ';
	}

	header_stream.write((char *)&d_start_string, 4);
	header_stream.write((char *)&d_cmd_name, 12);
	header_stream.write((char *)&d_payload_size, 4);
	header_stream.write(d_checksum, 4);

	std::cout << "header: \n";

	for (uint8_t i = 0; i < 24; i++)
	{
		if (i % 4 == 0)
		{
			std::cout << '\n';
		}

		std::cout << std::hex << (static_cast<int>(header_stream.span().data()[i]) & 0xFF) << ' ';
	}

	int bytes_count;
	
	bytes_count = send(sock, header_stream.span().data(), header_stream.span().size() + payload_stream.span().size(), 0);

	if (bytes_count == SOCKET_ERROR)
	{
		std::cerr << "Couldn't send data: " << WSAGetLastError() << '\n';
		return 1;
	}

	std::cout << (bytes_count == static_cast<int>(header_stream.span().size()) + static_cast<int>(payload_stream.span().size())) << '\n';

	// bytes_count = send(sock, payload_stream.span().data(), payload_stream.span().size(), 0);
	//
	// if (bytes_count == SOCKET_ERROR)
	// {
	// 	std::cerr << "Couldn't send data: " << WSAGetLastError() << '\n';
	// 	return 1;
	// }
	//
	// std::cout << (bytes_count == static_cast<int>(payload_stream.span().size())) << '\n';
	//
	// std::cout.write(header_stream.span().data(), header_stream.span().size());
	// std::cout << '\n';
	// std::cout.write(payload_stream.span().data(), payload_stream.span().size());
	// std::cout << '\n';
	
	char message_buffer[1024];
	
	bytes_count = recv(sock, message_buffer, 1024, 0);
	
	if (bytes_count == SOCKET_ERROR)
	{
		std::cerr << "Couldn't receive data: " << WSAGetLastError() << '\n';
		return 1;
	}
	
	std::cout << "recieved " << bytes_count << " bytes in message: ";
	
	std::cout.write(message_buffer, bytes_count);
	
	closesocket(sock);
	WSACleanup();
	
	// char msg[] = "chujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchujchuj";
	//
	// uint8_t *hash = reinterpret_cast<uint8_t*>(sha256(reinterpret_cast<const uint8_t*>(msg), (sizeof(char) * 8) * 4));
	//
	// std::cout << "hash: \n";
	// for (uint8_t i = 0; i < 4 * 8; i++)
	// {
	// 	if (i % 4 == 0)
	// 	{
	// 		std::cout << '\n';
	// 	}
	//
	// 	std::cout << std::bitset<8>(hash[i]) << ' ';
	// }
	
	return 0;
}

void exit_gracefully()
{
}